import '/auth/firebase_auth/auth_util.dart';
import '/backend/backend.dart';
import '/flutter_flow/flutter_flow_drop_down.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/flutter_flow/flutter_flow_widgets.dart';
import '/flutter_flow/form_field_controller.dart';
import 'update_goal_component_widget.dart' show UpdateGoalComponentWidget;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

class UpdateGoalComponentModel
    extends FlutterFlowModel<UpdateGoalComponentWidget> {
  ///  State fields for stateful widgets in this component.

  final formKey = GlobalKey<FormState>();
  // State field(s) for Switch widget.
  bool? switchValue;
  // State field(s) for LanguageTitle widget.
  FocusNode? languageTitleFocusNode;
  TextEditingController? languageTitleController;
  String? Function(BuildContext, String?)? languageTitleControllerValidator;
  String? _languageTitleControllerValidator(BuildContext context, String? val) {
    if (val == null || val.isEmpty) {
      return 'Field is required';
    }

    return null;
  }

  // State field(s) for LanguageDescription widget.
  FocusNode? languageDescriptionFocusNode;
  TextEditingController? languageDescriptionController;
  String? Function(BuildContext, String?)?
      languageDescriptionControllerValidator;
  String? _languageDescriptionControllerValidator(
      BuildContext context, String? val) {
    if (val == null || val.isEmpty) {
      return 'Field is required';
    }

    return null;
  }

  // State field(s) for GoalStatus widget.
  String? goalStatusValue;
  FormFieldController<String>? goalStatusValueController;
  // State field(s) for LanguagueProgress widget.
  double? languagueProgressValue;

  /// Initialization and disposal methods.

  void initState(BuildContext context) {
    languageTitleControllerValidator = _languageTitleControllerValidator;
    languageDescriptionControllerValidator =
        _languageDescriptionControllerValidator;
  }

  void dispose() {
    languageTitleFocusNode?.dispose();
    languageTitleController?.dispose();

    languageDescriptionFocusNode?.dispose();
    languageDescriptionController?.dispose();
  }

  /// Action blocks are added here.

  /// Additional helper methods are added here.
}
